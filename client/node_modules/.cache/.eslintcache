[{"/Users/semen/Desktop/Organaizer Application/client/src/index.js":"1","/Users/semen/Desktop/Organaizer Application/client/src/App.js":"2","/Users/semen/Desktop/Organaizer Application/client/src/components/Navbar/Navbar.jsx":"3","/Users/semen/Desktop/Organaizer Application/client/src/pages/AuthPage/AuthPage.jsx":"4","/Users/semen/Desktop/Organaizer Application/client/src/pages/RegistrationPage/RegistrationPage.jsx":"5","/Users/semen/Desktop/Organaizer Application/client/src/routes.js":"6","/Users/semen/Desktop/Organaizer Application/client/src/pages/MainPage/MainPage.jsx":"7","/Users/semen/Desktop/Organaizer Application/client/src/hooks/auth.hook.js":"8","/Users/semen/Desktop/Organaizer Application/client/src/context/AuthContext.js":"9","/Users/semen/Desktop/Organaizer Application/client/src/pages/GroupsPage/GroupsPage.jsx":"10","/Users/semen/Desktop/Organaizer Application/client/src/pages/AllGroups/AllGroups.jsx":"11","/Users/semen/Desktop/Organaizer Application/client/src/pages/SharedTasks/SharedTasks.jsx":"12"},{"size":255,"mtime":1674652272489,"results":"13","hashOfConfig":"14"},{"size":734,"mtime":1675684120473,"results":"15","hashOfConfig":"14"},{"size":1033,"mtime":1674805825490,"results":"16","hashOfConfig":"14"},{"size":2846,"mtime":1674745638936,"results":"17","hashOfConfig":"14"},{"size":2848,"mtime":1674745635644,"results":"18","hashOfConfig":"14"},{"size":1189,"mtime":1674640442178,"results":"19","hashOfConfig":"14"},{"size":5176,"mtime":1674744865793,"results":"20","hashOfConfig":"14"},{"size":941,"mtime":1674466593122,"results":"21","hashOfConfig":"14"},{"size":100,"mtime":1674464028920,"results":"22","hashOfConfig":"14"},{"size":3863,"mtime":1674744705149,"results":"23","hashOfConfig":"14"},{"size":2732,"mtime":1674744681576,"results":"24","hashOfConfig":"14"},{"size":6946,"mtime":1675062730315,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yaryj8",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},"/Users/semen/Desktop/Organaizer Application/client/src/index.js",[],[],"/Users/semen/Desktop/Organaizer Application/client/src/App.js",[],[],"/Users/semen/Desktop/Organaizer Application/client/src/components/Navbar/Navbar.jsx",[],[],"/Users/semen/Desktop/Organaizer Application/client/src/pages/AuthPage/AuthPage.jsx",[],[],"/Users/semen/Desktop/Organaizer Application/client/src/pages/RegistrationPage/RegistrationPage.jsx",[],[],"/Users/semen/Desktop/Organaizer Application/client/src/routes.js",[],[],"/Users/semen/Desktop/Organaizer Application/client/src/pages/MainPage/MainPage.jsx",[],[],"/Users/semen/Desktop/Organaizer Application/client/src/hooks/auth.hook.js",[],[],[],"/Users/semen/Desktop/Organaizer Application/client/src/context/AuthContext.js",[],[],"/Users/semen/Desktop/Organaizer Application/client/src/pages/GroupsPage/GroupsPage.jsx",[],[],"/Users/semen/Desktop/Organaizer Application/client/src/pages/AllGroups/AllGroups.jsx",[],[],"/Users/semen/Desktop/Organaizer Application/client/src/pages/SharedTasks/SharedTasks.jsx",["64","65"],[],"import React, {useState, useCallback, useContext} from 'react'\nimport './SharedTasks.scss'\nimport axios from 'axios'\nimport { useEffect } from 'react'\nimport { AuthContext } from '../../context/AuthContext'\n\nconst SharedTasks = () => {\n\n    const [groups, setGroups] = useState([])\n    \n    const [sharedTasks, setSharedTasks] = useState([])\n    const [currentGroup, setCurrentGroup] = useState('')\n    const [text, setText] = useState('')\n    const {userId} = useContext(AuthContext)\n    const [groupId, setGroupId] = useState('')\n    const [isChoosed, setIsChoosed] = useState(false)\n    \n    \n    const onOptionChangeHandler = (event) => {\n        setCurrentGroup(event.target.value)\n        setIsChoosed(true)\n        console.log(event.target.value)\n        groups.map((group) => {\n            if(group.groupName === event.target.value){\n                setGroupId(group._id)\n            }\n        })\n    }\n\n    const getGroup = useCallback(async () =>{\n        try {\n            await axios.get('api/group', {\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                params: {userId}\n            })\n            .then((response) => setGroups(response.data))\n        } catch (error) {\n            console.log(error)\n        }\n    }, [userId])\n\n    const getTodo = useCallback(async () =>{\n        try {\n            await axios.get('api/sharedtodo', {\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                params: {groupId}\n            })\n            .then((response) => setSharedTasks(response.data))\n        } catch (error) {\n            console.log(error)\n        }\n    }, [groupId])\n\n\n    const createTodo = useCallback(async () => {\n        if(!text) return null\n        try {\n            await axios.post('api/sharedtodo/add', {text : text, userId: groupId}, {\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n            .then((response) => {\n                setSharedTasks([...sharedTasks], response.data)\n                setText('')\n                getTodo()\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }, [text, groupId, sharedTasks, getTodo])\n\n    const removeTodos = useCallback(async (id) =>{\n        try {\n            await axios.delete(`api/sharedtodo/delete/${id}`, {id}, {\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n            .then(() => getTodo())\n        } catch (error) {\n            console.log(error)\n        }\n    }, [getTodo])\n\n    const completedTodo = useCallback(async (id) => {\n        try {\n            await axios.put(`api/sharedtodo/complete/${id}`, {id}, {\n                headers: {\n                    'Content-Type': 'application/json'\n                } \n            })\n            .then(response => {\n                setSharedTasks([...sharedTasks], response.data)\n                getTodo()\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }, [getTodo, sharedTasks])\n\n    const importantTodo = useCallback(async (id) => {\n        try {\n            await axios.put(`api/sharedtodo/important/${id}`, {id}, {\n                headers: {\n                    'Content-Type': 'application/json'\n                } \n            })\n            .then(response => {\n                setSharedTasks([...sharedTasks], response.data)\n                getTodo()\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }, [getTodo, sharedTasks])\n\n    useEffect(() => {\n        getGroup()\n        getTodo()\n    }, [getTodo, getGroup])\n\n    return(\n        <div className='container'>\n            <div className='main-page'>\n    \n            <h3>Select a group</h3>\n            \n                <div className=\"todos\">\n                <form>\n            <select className=\"browser-default\"\n                    onChange={onOptionChangeHandler}\n                    >\n                        <option value=''>Select one...</option>                      \n            { groups.map((groups, index) => {\n            return(<option key={index+1} value={groups.groupName}>{groups.groupName}</option>)}) }\n            </select>\n            </form>\n\n            \n            </div>\n            {isChoosed ? (<div><h3>Group tasks</h3>\n                <div className=\"todos\">\n                    {\n                        sharedTasks.map((todo, index) => {\n                            let cls = ['row flex todos-item']\n                                if(todo.completed) {\n                                    cls.push('completed')\n                                }\n                                if(todo.important) {\n                                    cls.push('important')\n                                }\n\n                            return(\n                            <div className={cls.join(' ')} key={index}>\n                                <div className=\"col todos-num\">{index+1}</div>\n                                <div className=\"col todos-text\">{todo.text}</div>\n                                <div className=\"col todos-buttons\"></div>\n                                <i className=\"material-icons blue-text\" onClick={() => completedTodo(todo._id)}>check</i>\n                                <i className=\"material-icons orange-text\" onClick={() => importantTodo(todo._id)}>warning</i>\n                                <i className=\"material-icons red-text\" onClick={() => removeTodos(todo._id)}>delete</i>\n                    </div>\n                        )}\n                        )}\n                </div>\n                <div className='container'>\n            <div className='main-page'>\n                <h4>Add task</h4>\n                <form className='form form-login' onSubmit={e => e.preventDefault()}>\n                    <div className='row'>\n                        <div className='input-field col s12'>\n                            <input type='text'\n                                   id='text'\n                                   name='input'\n                                   className='validate'\n                                   value={text}\n                                   onChange={e => setText(e.target.value)}\n                                   />\n                                   <label htmlFor='input'>Task</label>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button\n                                className='waves-effect waves-light btn blue'\n                                onClick={createTodo}\n                                >Add task</button>\n                    </div>\n                </form>\n            </div>    \n             </div>\n            </div>):(\"\")}\n               </div>\n               </div>\n\n)}\n\nexport default SharedTasks",{"ruleId":"66","severity":1,"message":"67","line":12,"column":12,"nodeType":"68","messageId":"69","endLine":12,"endColumn":24},{"ruleId":"70","severity":1,"message":"71","line":23,"column":28,"nodeType":"72","messageId":"73","endLine":23,"endColumn":30},"no-unused-vars","'currentGroup' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]